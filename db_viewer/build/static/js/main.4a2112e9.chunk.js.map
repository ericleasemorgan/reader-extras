{"version":3,"sources":["App.js","index.js"],"names":["App","state","db","err","results","me","this","Promise","all","initSqlJs","fetch","then","res","a","SQLite","dbStorage","Database","Uint8Array","arrayBuffer","setState","catch","sql","exec","e","columns","values","map","columnName","row","value","className","onChange","target","placeholder","toString","renderResult","React","Component","rootElement","document","getElementById","ReactDOM","render","StrictMode"],"mappings":"kfAKqBA,E,kDAEnB,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CAAEC,GAAI,KAAMC,IAAK,KAAMC,QAAS,MAFjC,E,gEAUZ,IAAMC,EAAKC,KACXC,QAAQC,IAAI,CAACC,MAAaC,MAAM,eAAeC,KAA/C,uCAAoD,WAAMC,GAAN,mBAAAC,EAAA,6DAC5CC,EAASF,EAAI,GAAIG,EAAYH,EAAI,GADW,KAEnCE,EAAOE,SAF4B,KAEfC,WAFe,SAEEF,EAAUG,cAFZ,uCAE5ChB,EAF4C,eAIlDG,EAAGc,SAAS,CAACjB,GAAIA,IAJiC,2CAApD,uDAKGkB,OAAM,SAAAjB,GACPE,EAAGc,SAAS,CAAChB,a,2BAMZkB,GACH,IAAIjB,EAAU,KAAMD,EAAM,KAC1B,IAGEC,EAAUE,KAAKL,MAAMC,GAAGoB,KAAKD,GAC7B,MAAOE,GAEPpB,EAAMoB,EAERjB,KAAKa,SAAS,CAAEf,UAASD,U,sCAMQ,IAApBqB,EAAmB,EAAnBA,QAASC,EAAU,EAAVA,OACtB,OACE,+BACE,+BACE,4BACGD,EAAQE,KAAI,SAAAC,GAAU,OACrB,4BAAKA,QAKX,+BACGF,EAAOC,KAAI,SAAAE,GAAG,OACb,4BACGA,EAAIF,KAAI,SAAAG,GAAK,OACZ,4BAAKA,c,+BAST,IAAD,SACoBvB,KAAKL,MAA1BC,EADC,EACDA,GAAIC,EADH,EACGA,IAAKC,EADR,EACQA,QACf,OAAKF,EAEH,yBAAK4B,UAAU,OAEb,iEAEA,8BACEC,SAAU,SAAAR,GAAC,OAAI,EAAKD,KAAKC,EAAES,OAAOH,QAClCI,YAAY,4EAGd,yBAAKH,UAAU,UAAU3B,GAAO,IAAI+B,YAEpC,6BAAM9B,EACFA,EAAQsB,IAAIpB,KAAK6B,cACjB,KAfQ,+C,GAnEaC,IAAMC,WCAjCC,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFL,K","file":"static/js/main.4a2112e9.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./styles.css\";\nimport initSqlJs from \"sql.js\";\n\n\nexport default class App extends React.Component {\n\n  constructor() {\n    super();\n    this.state = { db: null, err: null, results: null }\n  }\n\n  componentDidMount() {\n    // sql.js needs to fetch its wasm file, so we cannot immediately instantiate the database\n    // without any configuration, initSqlJs will fetch the wasm files directly from the same path as the js\n    // see ../config-overrides.js\n\n    const me = this;\n    Promise.all([initSqlJs(), fetch('./test.db')]).then(async res => {\n      const SQLite = res[0], dbStorage = res[1];\n      const db = new SQLite.Database(new Uint8Array(await dbStorage.arrayBuffer()));\n\n      me.setState({db: db});\n    }).catch(err => {\n      me.setState({err});\n    });\n\n  }\n  \n\n  exec(sql) {\n    let results = null, err = null;\n    try {\n      // The sql is executed synchronously on the UI thread. \n      // You may want to use a web worker\n      results = this.state.db.exec(sql); // an array of objects is returned\n    } catch (e) {\n      // exec throws an error when the SQL statement is invalid\n      err = e\n    }\n    this.setState({ results, err })\n  }\n\n  /**\n   * Renders a single value of the array returned by db.exec(...) as a table\n   */\n  renderResult({ columns, values }) {\n    return (\n      <table>\n        <thead>\n          <tr>\n            {columns.map(columnName =>\n              <td>{columnName}</td>\n            )}\n          </tr>\n        </thead>\n\n        <tbody>\n          {values.map(row => // values is an array of arrays representing the results of the query\n            <tr>\n              {row.map(value =>\n                <td>{value}</td>\n              )}\n            </tr>\n          )}\n        </tbody>\n      </table>\n    );\n  }\n\n  render() {\n    let { db, err, results } = this.state;\n    if (!db) return <pre>Loading...</pre>;\n    return (\n      <div className=\"App\">\n\n        <h1>Distant Reader SQLite Interpreter</h1>\n\n        <textarea\n          onChange={e => this.exec(e.target.value)}\n          placeholder=\"Enter some SQL. No inpiration ? Try “select sqlite_version()”\"\n        ></textarea>\n\n        <pre className=\"error\">{(err || \"\").toString()}</pre>\n\n        <pre>{results\n          ? results.map(this.renderResult) // results contains one object per select statement in the query\n          : \"\"\n        }</pre>\n\n      </div>\n    );\n  }\n\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}